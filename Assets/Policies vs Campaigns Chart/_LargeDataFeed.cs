using UnityEngine;
using ChartAndGraph;
using System.Collections.Generic;
using System;

public class _LargeDataFeed : MonoBehaviour, IComparer<DoubleVector2>
{
    List<DoubleVector2> mData = new List<DoubleVector2>();
    double pageSize = 50f;
    double currentPagePosition = 0.0;
    GraphChartBase graph;
    string[] dates = new string[] { "2015-01-01", "2015-01-02", "2015-01-03", "2015-01-04", "2015-01-05", "2015-01-06", "2015-01-07", "2015-01-08", "2015-01-09", "2015-01-10", "2015-01-11", "2015-01-12", "2015-01-13", "2015-01-14", "2015-01-15", "2015-01-16", "2015-01-17", "2015-01-18", "2015-01-19", "2015-01-20", "2015-01-21", "2015-01-22", "2015-01-23", "2015-01-24", "2015-01-25", "2015-01-26", "2015-01-27", "2015-01-28", "2015-01-29", "2015-01-30", "2015-01-31", "2015-02-01", "2015-02-02", "2015-02-03", "2015-02-04", "2015-02-05", "2015-02-06", "2015-02-07", "2015-02-08", "2015-02-09", "2015-02-10", "2015-02-11", "2015-02-12", "2015-02-13", "2015-02-14", "2015-02-15", "2015-02-16", "2015-02-17", "2015-02-18", "2015-02-19", "2015-02-20", "2015-02-21", "2015-02-22", "2015-02-23", "2015-02-24", "2015-02-25", "2015-02-26", "2015-02-27", "2015-02-28", "2015-03-01", "2015-03-02", "2015-03-03", "2015-03-04", "2015-03-05", "2015-03-06", "2015-03-07", "2015-03-08", "2015-03-09", "2015-03-10", "2015-03-11", "2015-03-12", "2015-03-13", "2015-03-14", "2015-03-15", "2015-03-16", "2015-03-17", "2015-03-18", "2015-03-19", "2015-03-20", "2015-03-21", "2015-03-22", "2015-03-23", "2015-03-24", "2015-03-25", "2015-03-26", "2015-03-27", "2015-03-28", "2015-03-29", "2015-03-30", "2015-03-31", "2015-04-01", "2015-04-02", "2015-04-03", "2015-04-04", "2015-04-05", "2015-04-06", "2015-04-07", "2015-04-08", "2015-04-09", "2015-04-10", "2015-04-11", "2015-04-12", "2015-04-13", "2015-04-14", "2015-04-15", "2015-04-16", "2015-04-17", "2015-04-18", "2015-04-19", "2015-04-20", "2015-04-21", "2015-04-22", "2015-04-23", "2015-04-24", "2015-04-25", "2015-04-26", "2015-04-27", "2015-04-28", "2015-04-29", "2015-04-30", "2015-05-01", "2015-05-02", "2015-05-03", "2015-05-04", "2015-05-05", "2015-05-06", "2015-05-07", "2015-05-08", "2015-05-09", "2015-05-10", "2015-05-11", "2015-05-12", "2015-05-13", "2015-05-14", "2015-05-15", "2015-05-16", "2015-05-17", "2015-05-18", "2015-05-19", "2015-05-20", "2015-05-21", "2015-05-22", "2015-05-23", "2015-05-24", "2015-05-25", "2015-05-26", "2015-05-27", "2015-05-28", "2015-05-29", "2015-05-30", "2015-05-31", "2015-06-01", "2015-06-02", "2015-06-03", "2015-06-04", "2015-06-05", "2015-06-06", "2015-06-07", "2015-06-08", "2015-06-09", "2015-06-10", "2015-06-11", "2015-06-12", "2015-06-13", "2015-06-14", "2015-06-15", "2015-06-16", "2015-06-17", "2015-06-18", "2015-06-19", "2015-06-20", "2015-06-21", "2015-06-22", "2015-06-23", "2015-06-24", "2015-06-25", "2015-06-26", "2015-06-27", "2015-06-28", "2015-06-29", "2015-06-30", "2015-07-01", "2015-07-02", "2015-07-03", "2015-07-04", "2015-07-05", "2015-07-06", "2015-07-07", "2015-07-08", "2015-07-09", "2015-07-10", "2015-07-11", "2015-07-12", "2015-07-13", "2015-07-14", "2015-07-15", "2015-07-16", "2015-07-17", "2015-07-18", "2015-07-19", "2015-07-20", "2015-07-21", "2015-07-22", "2015-07-23", "2015-07-24", "2015-07-25", "2015-07-26", "2015-07-27", "2015-07-28", "2015-07-29", "2015-07-30", "2015-07-31", "2015-08-01", "2015-08-02", "2015-08-03", "2015-08-04", "2015-08-05", "2015-08-06", "2015-08-07", "2015-08-08", "2015-08-09", "2015-08-10", "2015-08-11", "2015-08-12", "2015-08-13", "2015-08-14", "2015-08-15", "2015-08-16", "2015-08-17", "2015-08-18", "2015-08-19", "2015-08-20", "2015-08-21", "2015-08-22", "2015-08-23", "2015-08-24", "2015-08-25", "2015-08-26", "2015-08-27", "2015-08-28", "2015-08-29", "2015-08-30", "2015-08-31", "2015-09-01", "2015-09-02", "2015-09-03", "2015-09-04", "2015-09-05", "2015-09-06", "2015-09-07", "2015-09-08", "2015-09-09", "2015-09-10", "2015-09-11", "2015-09-12", "2015-09-13", "2015-09-14", "2015-09-15", "2015-09-16", "2015-09-17", "2015-09-18", "2015-09-19", "2015-09-20", "2015-09-21", "2015-09-22", "2015-09-23", "2015-09-24", "2015-09-25", "2015-09-26", "2015-09-27", "2015-09-28", "2015-09-29", "2015-09-30", "2015-10-01", "2015-10-02", "2015-10-03", "2015-10-04", "2015-10-05", "2015-10-06", "2015-10-07", "2015-10-08", "2015-10-09", "2015-10-10", "2015-10-11", "2015-10-12", "2015-10-13", "2015-10-14", "2015-10-15", "2015-10-16", "2015-10-17", "2015-10-18", "2015-10-19", "2015-10-20", "2015-10-21", "2015-10-22", "2015-10-23", "2015-10-24", "2015-10-25", "2015-10-26", "2015-10-27", "2015-10-28", "2015-10-29", "2015-10-30", "2015-10-31", "2015-11-01", "2015-11-02", "2015-11-03", "2015-11-04", "2015-11-05", "2015-11-06", "2015-11-07", "2015-11-08", "2015-11-09", "2015-11-10", "2015-11-11", "2015-11-12", "2015-11-13", "2015-11-14", "2015-11-15", "2015-11-16", "2015-11-17", "2015-11-18", "2015-11-19", "2015-11-20", "2015-11-21", "2015-11-22", "2015-11-23", "2015-11-24", "2015-11-25", "2015-11-26", "2015-11-27", "2015-11-28", "2015-11-29", "2015-11-30", "2015-12-01", "2015-12-02", "2015-12-03", "2015-12-04", "2015-12-05", "2015-12-06", "2015-12-07", "2015-12-08", "2015-12-09", "2015-12-10", "2015-12-11", "2015-12-12", "2015-12-13", "2015-12-14", "2015-12-15", "2015-12-16", "2015-12-17", "2015-12-18", "2015-12-19", "2015-12-20", "2015-12-21", "2015-12-22", "2015-12-23", "2015-12-24", "2015-12-25", "2015-12-26", "2015-12-27", "2015-12-28", "2015-12-29", "2015-12-30", "2016-01-02", "2016-01-03", "2016-01-04", "2016-01-05", "2016-01-06", "2016-01-07", "2016-01-08", "2016-01-09", "2016-01-10", "2016-01-11", "2016-01-12", "2016-01-13", "2016-01-14", "2016-01-15", "2016-01-17", "2016-01-18", "2016-01-19", "2016-01-20", "2016-01-21", "2016-01-22", "2016-01-23", "2016-01-24", "2016-01-25", "2016-01-26", "2016-01-27", "2016-01-28", "2016-01-29", "2016-01-30", "2016-02-02", "2016-02-03", "2016-02-04", "2016-02-05", "2016-02-06", "2016-02-07", "2016-02-08", "2016-02-09", "2016-02-10", "2016-02-11", "2016-02-12", "2016-02-13", "2016-02-14", "2016-02-15", "2016-02-17", "2016-02-18", "2016-02-19", "2016-02-20", "2016-02-21", "2016-02-22", "2016-02-23", "2016-02-24", "2016-02-25", "2016-02-26", "2016-02-27", "2016-02-28", "2016-02-29", "2016-03-01", "2016-03-02", "2016-03-03", "2016-03-04", "2016-03-05", "2016-03-06", "2016-03-07", "2016-03-08", "2016-03-09", "2016-03-10", "2016-03-11", "2016-03-12", "2016-03-13", "2016-03-14", "2016-03-15", "2016-03-17", "2016-03-18", "2016-03-19", "2016-03-20", "2016-03-21", "2016-03-22", "2016-03-23", "2016-03-24", "2016-03-25", "2016-03-26", "2016-03-27", "2016-03-28", "2016-03-29", "2016-03-30", "2016-04-02", "2016-04-03", "2016-04-04", "2016-04-05", "2016-04-06", "2016-04-07", "2016-04-08", "2016-04-09", "2016-04-10", "2016-04-11", "2016-04-12", "2016-04-13", "2016-04-14", "2016-04-15", "2016-04-17", "2016-04-18", "2016-04-19", "2016-04-20", "2016-04-21", "2016-04-22", "2016-04-23", "2016-04-24", "2016-04-25", "2016-04-26", "2016-04-27", "2016-04-28", "2016-04-29", "2016-04-30", "2016-05-02", "2016-05-03", "2016-05-04", "2016-05-05", "2016-05-06", "2016-05-07", "2016-05-08", "2016-05-09", "2016-05-10", "2016-05-11", "2016-05-12", "2016-05-13", "2016-05-14", "2016-05-15", "2016-05-17", "2016-05-18", "2016-05-19", "2016-05-20", "2016-05-21", "2016-05-22", "2016-05-23", "2016-05-24", "2016-05-25", "2016-05-26", "2016-05-27", "2016-05-28", "2016-05-29", "2016-05-30", "2016-06-02", "2016-06-03", "2016-06-04", "2016-06-05", "2016-06-06", "2016-06-07", "2016-06-08", "2016-06-09", "2016-06-10", "2016-06-11", "2016-06-12", "2016-06-13", "2016-06-14", "2016-06-15", "2016-06-17", "2016-06-18", "2016-06-19", "2016-06-20", "2016-06-21", "2016-06-22", "2016-06-23", "2016-06-24", "2016-06-25", "2016-06-26", "2016-06-27", "2016-06-28", "2016-06-29", "2016-06-30", "2016-07-02", "2016-07-03", "2016-07-04", "2016-07-05", "2016-07-06", "2016-07-07", "2016-07-08", "2016-07-09", "2016-07-10", "2016-07-11", "2016-07-12", "2016-07-13", "2016-07-14", "2016-07-15", "2016-07-17", "2016-07-18", "2016-07-19", "2016-07-20", "2016-07-21", "2016-07-22", "2016-07-23", "2016-07-24", "2016-07-25", "2016-07-26", "2016-07-27", "2016-07-28", "2016-07-29", "2016-07-30", "2016-08-02", "2016-08-03", "2016-08-04", "2016-08-05", "2016-08-06", "2016-08-07", "2016-08-08", "2016-08-09", "2016-08-10", "2016-08-11", "2016-08-12", "2016-08-13", "2016-08-14", "2016-08-15", "2016-08-17", "2016-08-18", "2016-08-19", "2016-08-20", "2016-08-21", "2016-08-22", "2016-08-23", "2016-08-24", "2016-08-25", "2016-08-26", "2016-08-27", "2016-08-28", "2016-08-29", "2016-08-30", "2016-09-02", "2016-09-03", "2016-09-04", "2016-09-05", "2016-09-06", "2016-09-07", "2016-09-08", "2016-09-09", "2016-09-10", "2016-09-11", "2016-09-12", "2016-09-13", "2016-09-14", "2016-09-15", "2016-09-17", "2016-09-18", "2016-09-19", "2016-09-20", "2016-09-21", "2016-09-22", "2016-09-23", "2016-09-24", "2016-09-25", "2016-09-26", "2016-09-27", "2016-09-28", "2016-09-29", "2016-09-30", "2016-10-02", "2016-10-03", "2016-10-04", "2016-10-05", "2016-10-06", "2016-10-07", "2016-10-08", "2016-10-09", "2016-10-10", "2016-10-11", "2016-10-12", "2016-10-13", "2016-10-14", "2016-10-15", "2016-10-17", "2016-10-18", "2016-10-19", "2016-10-20", "2016-10-21", "2016-10-22", "2016-10-23", "2016-10-24", "2016-10-25", "2016-10-26", "2016-10-27", "2016-10-28", "2016-10-29", "2016-10-30" };

    void Start()
    {
        graph = GetComponent<GraphChartBase>();

        double x = 0f;
        double[] policies = new double[] { 1223, 2512, 2474, 2505, 2398, 2457, 2532, 2441, 2458, 2499, 2527, 2410, 2412, 2530, 2498, 2545, 2499, 2543, 2488, 2428, 2450, 2469, 2433, 2511, 2478, 2513, 2457, 2485, 2486, 2425, 2368, 2482, 2484, 2472, 2472, 2464, 2531, 2511, 2546, 2472, 2526, 2447, 2461, 2515, 2518, 2397, 2502, 2528, 2405, 2449, 2476, 2494, 2434, 2385, 2441, 2463, 2375, 2555, 2517, 2516, 2376, 2412, 2416, 2456, 2548, 2496, 2448, 2515, 2561, 2418, 2499, 2404, 2511, 2455, 2495, 2498, 2467, 2567, 2413, 2434, 2442, 2606, 2532, 2523, 2368, 2439, 2488, 2446, 2519, 2511, 2585, 2490, 2530, 2427, 2401, 2521, 2496, 2373, 2492, 2495, 2457, 2484, 2370, 2498, 2482, 2381, 2475, 2423, 2460, 2562, 2500, 2539, 2498, 2478, 2512, 2491, 2420, 2560, 2528, 2489, 2506, 2518, 2475, 2488, 2482, 2452, 2394, 2451, 2508, 2496, 2476, 2481, 2440, 2417, 2411, 2463, 2478, 2451, 2460, 2562, 2496, 2512, 2449, 2450, 2430, 2425, 2471, 2559, 2543, 2520, 2461, 2487, 2452, 2536, 2494, 2557, 2503, 2458, 2537, 2452, 2489, 2469, 2545, 2464, 2508, 2554, 2386, 2450, 2518, 2468, 2459, 2441, 2392, 2529, 2416, 2463, 2448, 2451, 2544, 2429, 2418, 2556, 2450, 2494, 2481, 2430, 2441, 2544, 2506, 2542, 2372, 2404, 2465, 2498, 2509, 2535, 2398, 2511, 2516, 2467, 2473, 2514, 2504, 2542, 2450, 2538, 2520, 2487, 2395, 2531, 2462, 2515, 2483, 2519, 2465, 2474, 2568, 2452, 2453, 2434, 2513, 2472, 2426, 2490, 2504, 2548, 2479, 2520, 2560, 2533, 2447, 2446, 2507, 2446, 2509, 2599, 2484, 2459, 2511, 2516, 2438, 2521, 2451, 2429, 2567, 2473, 2438, 2478, 2460, 2432, 2440, 2505, 2450, 2453, 2456, 2481, 2514, 2436, 2501, 2514, 2389, 2448, 2479, 2446, 2492, 2420, 2513, 2389, 2454, 2491, 2466, 2541, 2452, 2549, 2485, 2410, 2468, 2485, 2515, 2566, 2559, 2510, 2403, 2471, 2467, 2431, 2480, 2482, 2518, 2491, 2426, 2454, 2408, 2355, 2518, 2432, 2391, 2550, 2404, 2456, 2453, 2459, 2407, 2502, 2445, 2399, 2420, 2455, 2461, 2440, 2511, 2540, 2361, 2543, 2436, 2566, 2374, 2457, 2499, 2411, 2529, 2542, 2371, 2450, 2438, 2478, 2444, 2544, 2496, 2418, 2521, 2526, 2382, 2507, 2379, 2432, 2504, 2519, 2521, 2509, 2532, 2494, 2530, 2389, 2503, 2651, 2530, 2425, 2468, 2487, 2487, 2533, 2452, 2480, 2487, 2448, 2401, 2488, 2541, 2445, 2416, 2413, 2500, 1255, 464, 1014, 1004, 1022, 960, 970, 1031, 1050, 945, 1009, 1030, 1010, 979, 512, 462, 1014, 924, 922, 844, 918, 951, 898, 934, 922, 891, 970, 935, 415, 836, 1675, 1676, 1688, 1582, 1628, 1659, 1675, 1737, 1695, 1770, 1733, 1722, 824, 1061, 2348, 2240, 2128, 2206, 2139, 2281, 2228, 2369, 2227, 2349, 2524, 1944, 954, 333, 814, 779, 754, 814, 870, 812, 793, 788, 831, 810, 803, 797, 402, 653, 1280, 1208, 1286, 1281, 1253, 1209, 1224, 1301, 1234, 1240, 1316, 1258, 657, 1217, 2338, 2449, 2405, 2451, 2428, 2327, 2539, 2500, 2505, 2441, 2380, 2475, 1245, 1634, 3315, 3405, 3353, 3404, 3369, 3433, 3442, 3536, 3333, 3357, 3360, 3443, 1716, 2428, 4702, 4783, 4921, 4687, 4837, 4903, 4736, 4832, 4875, 4846, 4757, 4741, 2352, 1629, 3368, 3216, 3251, 3267, 3374, 3310, 3291, 3278, 3250, 3271, 3393, 3166, 1736, 1915, 3938, 3897, 3933, 3933, 3973, 3912, 3921, 4016, 3986, 4084, 3887, 4067, 2038, 1189, 2409, 2465, 2397, 2275, 2358, 2397, 2333, 2376, 2417, 2423, 2393, 2460, 1208, 1734, 3403, 3432, 3477, 3446, 3405, 3390, 3362, 3491, 3445, 3353, 3490, 3461, 1611, 1327, 2456, 2499, 2443, 2364, 2448, 2513, 2478, 2430, 2463, 2417, 2534, 2537, 1291, 234, 429, 459, 462, 445, 456, 435, 415, 463, 449, 422, 440, 421, 212, 302, 585, 571, 573, 563, 605, 573, 592, 580, 598, 578, 558, 536, 283, 203, 463, 551, 422, 526, 446, 509, 488, 427, 506, 453, 454, 447, 209, 243, 384, 442, 456, 468, 404, 478, 461, 449, 410, 481, 404, 434, 207, 369, 681, 632, 726, 670, 644, 688, 701, 647, 668, 666, 682, 715, 334, 252, 489, 459, 491, 476, 480, 480, 466, 465, 466, 440, 493, 451, 221 };
        for (int i = 0; i < policies.Length; i++)    // initialize with random data
        {
            mData.Add(new DoubleVector2(i, policies[i] * 1.0));
            x = i;
        }
        LoadPage(currentPagePosition); // load the page at position 0
        SetGraphSize(30); //1 month of data
        graph.DataSource.HorizontalViewOrigin = 1420000000; //Start graph at beginning of data set, seconds from epoch
    }

    public void SetGraphSize(int days)
    {
        graph.DataSource.HorizontalViewSize = days * 24 * 60.0 * 60.0; // 6months of data
    }

    int FindClosestIndex(double position) // if you want to know what is index is currently displayed . use binary search to find it
    {
        //NOTE :: this method assumes your data is sorted !!!
        int res = mData.BinarySearch(new DoubleVector2(position, 0.0), this);
        if (res >= 0)
            return res;
        return ~res;
    }


    void findPointsForPage(double position, out int start, out int end) // given a page position , find the right most and left most indices in the data for that page.
    {
        int index = FindClosestIndex(position);
        int i = index;
        double endPosition = position + pageSize;
        double startPosition = position - pageSize;

        //starting from the current index , we find the page boundries
        for (start = index; start > 0; start--)
        {
            if (mData[i].x < startPosition) // take the first point that is out of the page. so the graph doesn't break at the edge
                break;
        }
        for (end = index; end < mData.Count; end++)
        {
            if (mData[i].x > endPosition) // take the first point that is out of the page
                break;
        }
    }
    private void Update()
    {
        if (graph != null)
        {
            //check the scrolling position of the graph. if we are past the view size , load a new page
            double pageStartThreshold = currentPagePosition - pageSize;
            double pageEndThreshold = currentPagePosition + pageSize - graph.DataSource.HorizontalViewSize;
            if (graph.HorizontalScrolling < pageStartThreshold || graph.HorizontalScrolling > pageEndThreshold)
            {
                LoadPage(graph.HorizontalScrolling);
            }
        }
    }
    void LoadPage(double pagePosition)
    {

        if (graph != null)
        {
            graph.DataSource.StartBatch(); // call start batch
            //graph.DataSource.HorizontalViewOrigin = 0;
            Debug.Log("Origin: " + graph.DataSource.HorizontalViewOrigin);
            Debug.Log("Size: " + graph.DataSource.HorizontalViewSize);
            int start, end;
            findPointsForPage(pagePosition, out start, out end); // get the page edges
            graph.DataSource.ClearCategory("Player 1"); // clear the cateogry
            for (int i = start; i < end; i++) {
                //Debug.Log(DateTime.ParseExact(dates[i], "yyyy-mm-dd", null));
                graph.DataSource.AddPointToCategory("Player 1", DateTime.ParseExact(dates[i], "yyyy-mm-dd", null), mData[i].y);
        }
            graph.DataSource.EndBatch();
            graph.HorizontalScrolling = pagePosition;
        }
        currentPagePosition = pagePosition;
    }

    public int Compare(DoubleVector2 x, DoubleVector2 y)
    {
        if (x.x < y.x)
            return -1;
        if (x.x < y.x)
            return 1;
        return 0;
    }
}

